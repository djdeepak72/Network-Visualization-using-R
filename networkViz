
install.packages("htmltools")
install.packages("networkD3")
install.packages("dplyr")
install.packages("tidyr")
install.packages("igraph" )
install.packages("htmltools")
install.packages("rmarkdown")


library(networkD3)
library(dplyr)
library(rmarkdown)
library(tidyr)
library(igraph)
library(htmltools)
library(htmlwidgets)



tempLinks<-read.csv(file="dataset.csv",header=T)
# Read a data set which contains 3 columns: SOURCE_NODE, TARGET_NODE & WEIGHT of the edge connecting these 2 nodes.

edgeList<-subset(tempLinks,select=c(1,3))
edgeList$Weight <- sample(10, size = nrow(edgeList), replace = TRUE)
edgeList<-(subset(edgeList,node_1<5000))
colnames(edgeList) <- c("SourceName", "TargetName", "Weight")


# Create a graph. 
gD <- igraph::simplify(igraph::graph.data.frame(edgeList, directed=FALSE))

# Create a node list that will contain information about nodes
nodeList <- data.frame(ID = c(0:(igraph::vcount(gD) - 1)), # because networkD3 library requires IDs to start at 0
                       nName = igraph::V(gD)$name)

# Map node names from the edge list to node IDs
getNodeID <- function(x){
  which(x == igraph::V(gD)$name) - 1 # to ensure that IDs start at 0
}
# And add them to the edge list
edgeList <- plyr::ddply(edgeList, .variables = c("SourceName", "TargetName", "Weight"), 
                        function (x) data.frame(SourceID = getNodeID(x$SourceName), 
                                                TargetID = getNodeID(x$TargetName)))

############################################################################################
# Calculate some node properties and node similarities

# Calculate degree for each nodes
nodeList <- cbind(nodeList, nodeDegree=igraph::degree(gD, v = igraph::V(gD), mode = "all"))

# Calculate betweenness for each nodes
betAll <- igraph::betweenness(gD, v = igraph::V(gD), directed = FALSE) / (((igraph::vcount(gD) - 1) * (igraph::vcount(gD)-2)) / 2)
betAll.norm <- (betAll - min(betAll))/(max(betAll) - min(betAll))
nodeList <- cbind(nodeList, nodeBetweenness=100*betAll.norm) # We are scaling the value by multiplying it by 100 for visualization purposes only (to create larger nodes)
rm(betAll, betAll.norm)

#Calculate Dice similarities for all pairs of nodes
dsAll <- igraph::similarity.dice(gD, vids = igraph::V(gD), mode = "all")

F1 <- function(x) {data.frame(diceSim = dsAll[x$SourceID +1, x$TargetID + 1])}
edgeList <- plyr::ddply(edgeList, .variables=c("SourceName", "TargetName", "Weight", "SourceID", "TargetID"), 
                        function(x) data.frame(F1(x)))

rm(dsAll, F1, getNodeID, gD)
# create a set of colors for each edge, based on their dice similarity values

F2 <- colorRampPalette(c("black","red"), bias = 1, space = "rgb", interpolate = "linear")
colCodes <- F2(length(unique(edgeList$diceSim)))
edges_col <- sapply(edgeList$diceSim, function(x) colCodes[which(sort(unique(edgeList$diceSim)) == x)])

rm(colCodes, F2)

#######creating a network
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, 
                                         Nodes = nodeList, 
                                         Source = "SourceID", 
                                         Target = "TargetID", 
                                         Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
                                         NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
                                         Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
                                         Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
                                         height = 500, # Size of the plot (vertical)
                                         width = 1000,  # Size of the plot (horizontal)
                                         fontSize = 20, # Font size
                                         linkDistance = networkD3::JS("function(d) { return 10*d.value; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
                                         linkWidth = networkD3::JS("function(d) { return d.value/5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
                                         opacity = 1, # opacity
                                         zoom = TRUE, # ability to zoom when click on the node
                                         opacityNoHover = 0.1, # opacity of labels when static
                                         linkColour = edges_col) # edge colors


D3_network_LM <- htmlwidgets::onRender(
  D3_network_LM,
  '
  function(el,x){
  debugger;
  var optArray = [];
  for (var i = 0; i < x.nodes.name.length - 1; i++) {
  optArray.push(x.nodes.name[i]);
  }
  
  optArray = optArray.sort();
  
  $(function () {
  $("#search").autocomplete({
  source: optArray
  });
  });
  
  d3.select(".ui-widget button").node().onclick=searchNode;
  
  function searchNode() {
  debugger;
  //find the node
  
  var selectedVal = document.getElementById("search").value;
  var svg = d3.select(el).select("svg");
  var node = d3.select(el).selectAll(".node");
  
  if (selectedVal == "none") {
  node.style("stroke", "white").style("stroke-width", "1");
  } else {
  var selected = node.filter(function (d, i) {
  return d.name != selectedVal;
  });
  selected.style("opacity", "0");
  var link = svg.selectAll(".link")
  link.style("opacity", "0");
  d3.selectAll(".node, .link").transition()
  .duration(5000)
  .style("opacity", 1);
  }
  }
  }  
  '
)

browsable(
  attachDependencies(
    tagList(
      tags$head(
        tags$link(
          href="http://code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css",
          rel="stylesheet"
        )
      ),
      HTML(
        '
        <div class="ui-widget">
        <input id="search">
        <button type="button">Search</button>
        </div>
        '     
      ),
      D3_network_LM
      ),
    list(
      rmarkdown::html_dependency_jquery(),
      rmarkdown::html_dependency_jqueryui()
    )
    )
    )
